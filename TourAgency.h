#pragma once
#include <iostream>
#include <string>
#include "Hotel.h"
#include "Accomodation.h"
#include "FoodService.h"
#include "UserException.h"
#include "User.h"
#include "Windows.h"
//#include"Design.h"
using namespace std;

class TourAgency
{
protected:
	string name;
	Accomodation hArr;
	FoodService fServ;
	TourArr tour_arr;
	Map map;
	int loggedIn = 0;
	string wayToData;
	vector<User> users;
	float price;
public:
	//methods for design
	void showVertoZilla() {
		cout << " \n";
		cout << "								                                                       ,,    ,,    ,,           \n";
		cout << "								`7MMF'   `7MF'                mm           MMM\"\"\"AMV   db  `7MM  `7MM           \n";
		cout << "								  `MA     ,V                  MM           M'   AMV          MM    MM           \n";
		cout << "								   VM:   ,V .gP\"Ya `7Mb,od8 mmMMmm ,pW\"Wq. '   AMV   `7MM    MM    MM   ,6\"Yb.  \n";
		cout << "								    MM.  M',M'   Yb  MM' \"'   MM  6W'   `Wb   AMV      MM    MM    MM  8)   MM  \n";
		cout << "								    `MM A' 8M\"\"\"\"\"\"  MM       MM  8M     M8  AMV   ,   MM    MM    MM   ,pm9MM  \n";
		cout << "								     :MM;  YM.    ,  MM       MM  YA.   ,A9 AMV   ,M   MM    MM    MM  8M   MM  \n";
		cout << "								      VF    `Mbmmd'.JMML.     `Mbmo`Ybmd9' AMVmmmmMM .JMML..JMML..JMML.`Moo9^Yo.\n\n\n\n\n\n\n\n";
	}

	void showPlane(int a) {
		//frame 1
		showVertoZilla();
		string tabs = "\t\t\t\t\t\t\t\t   ";
		cout << tabs + "                              /   ((*             \n";
		cout << tabs + "                               ((((((((((         \n";
		cout << tabs + "                                  ((              \n";
		cout << tabs + "                                                  \n";
		cout << tabs + "                            ,(((((((((((((,      \n";
		cout << tabs + "                       ((, ((((((((((((      ,((  \n";
		cout << tabs + "                   .(,          (((/ ((      *(((((,\n";
		cout << tabs + "                 (((         (((   /((((((((((((.(( ((\n";
		cout << tabs + "               *(((.              *(((((((((((((*((((((/\n";
		cout << tabs + "              ((((              /(((((((((((((((*       ( \n";
		cout << tabs + "             (((((           ((((((((((((((((((. (((((((((\n";
		cout << tabs + "            (((((((   ((((((((((((((((((((((((        ,((.( \n";
		cout << tabs + "            (((((((*   /,((((((((((((((((((/             (( \n";
		cout << tabs + "            ((((((((((/  ((((((((((((((((((.              (. \n";
		cout << tabs + "            ((((((((((((((       (((((((((((.             (. \n";
		cout << tabs + "            ((((((((((((((         *(((((((((((((((*      (  \n";
		cout << tabs + "            .(((((((((((((.           /(((((((((((((     (,  \n";
		cout << tabs + "             ,((((((((((((((/        ,(((((((((((((/    (,   \n";
		cout << tabs + "               ((((((((((((((*      ((((((((((((((((   (     \n";
		cout << tabs + "                /(((((((((((((     (((((((((((((((((((/      \n";
		cout << tabs + "                  ,(((((((((((   *((((((((((((((((((,        \n";
		cout << tabs + "                     *((((((((,  ((((((((((((((((*           \n";
		cout << tabs + "                         .((((((. (((((((((((.              \n";
		Sleep(a);
		system("cls");

		//frame 2
		showVertoZilla();
		cout << tabs + "                              **   ((             \n";
		cout << tabs + "                               ,((((((((((        \n";
		cout << tabs + "                                  ,(/             \n";
		cout << tabs + "                                                  \n";
		cout << tabs + "                            ,(((((((((((((,      \n";
		cout << tabs + "                       ((, (((((((((((       .((  \n";
		cout << tabs + "                   .(,         /((( .(,      ((((((,\n";
		cout << tabs + "                 ((/        .((*   (((((((((((((.(/ ((\n";
		cout << tabs + "               *(((               /(((((((((((((/((((/(/ \n";
		cout << tabs + "              (((,              ((((((((((((((((        ( \n";
		cout << tabs + "             (((((          .(((((((((((((((((( *(((((((((\n";
		cout << tabs + "            (((((((   (((((((((((((((((((((((         (((.( \n";
		cout << tabs + "            (((((((   *.(((((((((((((((((((              /( \n";
		cout << tabs + "            ((((((((((   ((((((((((((((((((               (. \n";
		cout << tabs + "            (((((((((((((/      .(((((((((((              (. \n";
		cout << tabs + "            (((((((((((((          /(((((((((((((((       (  \n";
		cout << tabs + "            .(((((((((((((            (((((((((((((*     (,  \n";
		cout << tabs + "             ,((((((((((((((         ((((((((((((((     (,   \n";
		cout << tabs + "               ((((((((((((((       (((((((((((((((,   (     \n";
		cout << tabs + "                /((((((((((((     /(((((((((((((((((((/      \n";
		cout << tabs + "                  ,((((((((((/   (((((((((((((((((((,        \n";
		cout << tabs + "                     *((((((((  .((((((((((((((((*           \n";
		cout << tabs + "                         .((((((  (((((((((((.              \n";
		Sleep(a);
		system("cls");

		//frame 3
		showVertoZilla();
		cout << tabs + "                                 (   ((           \n";
		cout << tabs + "                                  ((((((((((      \n";
		cout << tabs + "                                    *((           \n";
		cout << tabs + "                                                  \n";
		cout << tabs + "                            ,(((((((((((((,      \n";
		cout << tabs + "                       ((((((((((((((        *((  \n";
		cout << tabs + "                   .(,        (((/ ((      ,(((((((,\n";
		cout << tabs + "                 ((        (((   /((((((((((((.((   ((\n";
		cout << tabs + "               *(,              ,(((((((((((((*(((((  (/\n";
		cout << tabs + "              ((              *(((((((((((((((/         ( \n";
		cout << tabs + "             (((           /(((((((((((((((((. ((((((((/ ( \n";
		cout << tabs + "            (((((.  ((((((((((((((((((((((((        .((  .( \n";
		cout << tabs + "            (((((/   (.(((((((((((((((((((             /  ( \n";
		cout << tabs + "            (((((((((  /(((((((((((((((((,               .(. \n";
		cout << tabs + "            ((((((((((((       /((((((((((,               (. \n";
		cout << tabs + "            ((((((((((((         ,(((((((((((((((/        (  \n";
		cout << tabs + "            .(((((((((((,           *(((((((((((((      /(,  \n";
		cout << tabs + "             ,((((((((((((/        .(((((((((((((/      (,   \n";
		cout << tabs + "               ((((((((((((/      /(((((((((((((((     (     \n";
		cout << tabs + "                /(((((((((((     ((((((((((((((((((, (/      \n";
		cout << tabs + "                  ,(((((((((   *((((((((((((((((((((,        \n";
		cout << tabs + "                     *((((((*  ((((((((((((((((((*           \n";
		cout << tabs + "                         .((((. (((((((((((((.              \n";
		Sleep(a);
		system("cls");

		//frame 4
		showVertoZilla();
		cout << tabs + "                                     (   /(       \n";
		cout << tabs + "                                     .((((((/.    \n";
		cout << tabs + "                                        (((,      \n";
		cout << tabs + "                                                  \n";
		cout << tabs + "                            ,((((((//(((((,      \n";
		cout << tabs + "                       (((((((((((        .(((((  \n";
		cout << tabs + "                   .(,     (((( ((      .(((((((,,(,\n";
		cout << tabs + "                 ((     /((   *((((((((((((,/(.     ((\n";
		cout << tabs + "               /(        .   ,(((((((((((((/(((((.    (/\n";
		cout << tabs + "              (.           ,(((((((((((((((/            ( \n";
		cout << tabs + "             (          *(((((((((((((((((* (((((((((    ( \n";
		cout << tabs + "            ((.  *(((((((((((((((((((((((         ((    (,( \n";
		cout << tabs + "            (((   ( (((((((((((((((((((             /     ( \n";
		cout << tabs + "            ((((((  *((((((((((((((((((                 *((. \n";
		cout << tabs + "            (((((((((.      *((((((((((*                 ,(. \n";
		cout << tabs + "            (((((((((         .((((((((((((((((        ,((( \n";
		cout << tabs + "            .((((((((*           .(((((((((((((      ,((((, \n";
		cout << tabs + "             ,((((((((((         ((((((((((((((       (((,  \n";
		cout << tabs + "               (((((((((/      .(((((((((((((((      (((    \n";
		cout << tabs + "                /((((((((     ((((((((((((((((((*  .((/     \n";
		cout << tabs + "                  ,((((((   .(((((((((((((((((((((((,       \n";
		cout << tabs + "                     *((((  (((((((((((((((((((((*          \n";
		cout << tabs + "                         .(((((((((((((((((((.             \n";
		Sleep(a);
		system("cls");

		//frame 5
		showVertoZilla();
		cout << tabs + "\n";
		cout << tabs + "                                           .(,  ((\n";
		cout << tabs + "                                              *(((/\n";
		cout << tabs + "                                             (((,  ,(,\n";
		cout << tabs + "                            ,(((((///(((((,         \n";
		cout << tabs + "                       ((((((.        ((((((((((    \n";
		cout << tabs + "                   .(,*(((. (*      ((((((((   .(((,\n";
		cout << tabs + "                 (( ((/   ((((((((((((( ((          ((\n";
		cout << tabs + "               /(        /(((((((((((((*(((((         (/\n";
		cout << tabs + "              (.       ((((((((((((((((.                (\n";
		cout << tabs + "             (      (((((((((((((((((( ,((((((((         (\n";
		cout << tabs + "            ((((((((((((((((((((((((,        (((   ./    .(\n";
		cout << tabs + "            (,,(((((((((((((((((((              (     (((*(\n";
		cout << tabs + "            (.  ((((((((((((((((((                 ./((((((.\n";
		cout << tabs + "            (((((       (((((((((((                  ((((((.\n";
		cout << tabs + "            ((((          /(((((((((((((((         (((((((( \n";
		cout << tabs + "            .((((            (((((((((((((/      (((((((((,\n";
		cout << tabs + "             ,(((((.        ((((((((((((((       ((( ((((,\n";
		cout << tabs + "               (((((       (((((((((((((((*     ((  ((((  \n";
		cout << tabs + "                /(((.    *((((((((((((((((((   (((((((/   \n";
		cout << tabs + "                  ,((   ((((((((((((((((((((((((((((,     \n";
		cout << tabs + "                     *(*(((((((((((((((((((((((((*        \n";
		cout << tabs + "                         .(((((((((((((((((((.           \n";
		Sleep(a);
		system("cls");

		//frame 6
		showVertoZilla();
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + "                                                     *                " << endl;
		cout << tabs + "                                                     (/  (,           " << endl;
		cout << tabs + "                            ,(((((((((((((,           .(((/           " << endl;
		cout << tabs + "                       ((,      ((((((((((((((((    ((((((((          " << endl;
		cout << tabs + "                   .(((       (((((((*   /(/     ,(,                  " << endl;
		cout << tabs + "                 ((,((((((((((((**(.                ((                " << endl;
		cout << tabs + "               *( .(((((((((((((/(((((,               (/              " << endl;
		cout << tabs + "              (..((((((((((((((((                       (             " << endl;
		cout << tabs + "             ((((((((((((((((((* (((((((((               (            " << endl;
		cout << tabs + "            ((((((((((((((((((         ((.   (.          .(           " << endl;
		cout << tabs + "            ((((((((((((((((             *.    .(((       (           " << endl;
		cout << tabs + "            ((((((((((((((((                 *((((((/  *(((.          " << endl;
		cout << tabs + "            (    *((((((((((/                 .(((((((*,(((.          " << endl;
		cout << tabs + "            (      .((((((((((((((((        .((((((((((((((           " << endl;
		cout << tabs + "            .(         (((((((((((((      .(((((((((((((((,           " << endl;
		cout << tabs + "             ,(       ((((((((((((((       ((..((((((((((,            " << endl;
		cout << tabs + "               (    .(((((((((((((((      (( ,((((((((((              " << endl;
		cout << tabs + "                *( ((((((((((((((((((/   (((((((((((((/               " << endl;
		cout << tabs + "                  ,(((((((((((((((((((((((((((((((((,                 " << endl;
		cout << tabs + "                     *(((((((((((((((((((((((((((*                    " << endl;
		cout << tabs + "                         .(((((((((((((((((((.                        " << endl;
		Sleep(a);
		system("cls");

		//frame 7
		showVertoZilla();
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + "                           /(((((((((((((((*                          \n";
		cout << tabs + "                      /((((((((((((((((((/.   /(,                     \n";
		cout << tabs + "                   ((((((((((     .               (/           .      \n";
		cout << tabs + "                 ((((((( .((, /                     *(       ,(.      \n";
		cout << tabs + "               ((((((((((((((/                        //      /(/((   \n";
		cout << tabs + "             .(((((((((.       //*                      (   ,((((/    \n";
		cout << tabs + "             (((((((((((///(((((((                      ((      /(.   \n";
		cout << tabs + "            (((((((((/         .(,   ((.                ,((           \n";
		cout << tabs + "           .((((((((              /     ((((          /((((           \n";
		cout << tabs + "           .((((((((                 ..((((((  /(((.  * (((           \n";
		cout << tabs + "            (((((((((/.               /(((((((((((((,,(((((           \n";
		cout << tabs + "            (.((((((((((((((        (((((((((((((((((((((((           \n";
		cout << tabs + "             (*(((((((((((((      .(((((((((((((((((((((((            \n";
		cout << tabs + "              ((((((((((((((      .(/ .((((((((((((((((((             \n";
		cout << tabs + "               (((((((((((((/    ,((/((((((((((((((((((*              \n";
		cout << tabs + "                 (((((((((((((. /(((((((((((((((((((((                \n";
		cout << tabs + "                   /(((((((((((((((((((((((((((((((,                  \n";
		cout << tabs + "                      ,(((((((((((((((((((((((((                      \n";
		cout << tabs + "                           ./(((((((((((((/                           \n";
		Sleep(a);
		system("cls");

		//frame 8
		showVertoZilla();
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + " \n"
			<< tabs + "                           /(((((((((((((((*                          \n"
			<< tabs + "                      /((((((((((/    *((*    /(,                     \n"
			<< tabs + "                   ((     .                      .(/                  \n"
			<< tabs + "                 (((. /                         .(( *((              \n"
			<< tabs + "               ((((((/                            (((((/            \n"
			<< tabs + "             .(        //,                        (((((((           \n"
			<< tabs + "             (((*//((((((/                      ((((((((((          \n"
			<< tabs + "            (,         *(.   ((                 /((((((((((         \n"
			<< tabs + "           .(             *     ((((          (((((((((((((         \n"
			<< tabs + "           .(                .,(((((/  ((((  ,,,(((((((((((         \n"
			<< tabs + "            (/.               ((((((((((((((.*(((((((((((((      (((\n"
			<< tabs + "            ((((((((       .((((((((((((((((((((((/   (((((  /(/.(, \n"
			<< tabs + "             (((((((      *(((((((((((((((((((((((((((/(((     ((((( \n"
			<< tabs + "              ((((((      *(* ,((((((((((((((((((((,   /(      *(.   \n"
			<< tabs + "               (((((*    /((/((((((((((((((((((       (*             \n"
			<< tabs + "                 (((((  (((((((((((((((((((((((     /(               \n"
			<< tabs + "                   /(((((((((((((((((((((((((((((((,                 \n"
			<< tabs + "                      ,(((((((((((((((((((((((((                      \n"
			<< tabs + "                           ./(((((((((((((/                           \n"
			<< tabs + "                                                                    \n"
			<< tabs + "                                                                    \n"
			<< tabs + "                                                                    \n";
		Sleep(a);
		system("cls");

		//frame 9
		showVertoZilla();
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + " \n"
			<< tabs + "                           /(((((((((((((((*                          \n"
			<< tabs + "                      /(((,   .((/       .*/((((,                     \n"
			<< tabs + "                   ((                     (  *(((((/                  \n"
			<< tabs + "                 (.                      ((. /((((((((                \n"
			<< tabs + "               (.                         (((((((((((((/              \n"
			<< tabs + "             .(,//                        ((((((((((((( (             \n"
			<< tabs + "             (((((                      *((((((((((((((/ (            \n"
			<< tabs + "            (   ((   .(*                 ((((((((((((((( *(           \n"
			<< tabs + "           .(     (     ((((          .(((((((((((((((((( (           \n"
			<< tabs + "           .(        ..((((((  ,(((/  ( (((((((((((((((((((           \n"
			<< tabs + "            (         ,(((((((((((((/.(((((((((((((((((((((           \n"
			<< tabs + "            (       (((((((((((((((((((((((,  ,((((((((((((           \n"
			<< tabs + "             (     ((((((((((((((((((((((((((((/((((((((((            \n"
			<< tabs + "              (    ((  ((((((((((((((((((((/   ( ((((((((             \n"
			<< tabs + "               (* ((*((((((((((((((((((           (((((*              \n"
			<< tabs + "                 ((((((((((((((((((((((           ,(((                \n"
			<< tabs + "                   /(((((((((((((((((((((((((    ((,                  \n"
			<< tabs + "                      ,(((((((((((((((((((((((((    (                 \n"
			<< tabs + "                           ./(((((((((((((/         ((.((/((          \n"
			<< tabs + "                                                   /((/(.             \n"
			<< tabs + "                                                 ((                   \n"
			<< tabs + "                                                                      \n";
		Sleep(a);
		system("cls");

		//frame 10
		showVertoZilla();
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + " \n"
			<< tabs + "                           /(((((((((((((((*                          \n"
			<< tabs + "                      /(/((.       ,/(((((((((((,                     \n"
			<< tabs + "                   ((              *   ((((((((/(((/                  \n"
			<< tabs + "                 (.               /(/ .(((((((((((/ *(                \n"
			<< tabs + "               (.                  /(((((((((((((.    //              \n"
			<< tabs + "             .(                  .  ((((((((((((        (             \n"
			<< tabs + "             (                    (((((((((((((((        (            \n"
			<< tabs + "            (  ((                 ((((((((((((((((  ,((((((           \n"
			<< tabs + "           .(    ,(((*          ((((((((((((((((((,    ((((           \n"
			<< tabs + "           .(  ./(((((.  ((((  / /(((((((((((((((((((*  (((           \n"
			<< tabs + "            (   (((((((((((((( (((((((((((((((((((((((((  (           \n"
			<< tabs + "            (*((((((((((((((((((((((*  .(((((((((((((((( *(           \n"
			<< tabs + "             (((((((((((((((((((((((((((*(((((((((((((((((            \n"
			<< tabs + "              ( (((((((((((((((((((((.  * (((((((((((((((             \n"
			<< tabs + "               (((((((((((((((((/          ,(((((((((((*              \n"
			<< tabs + "                 (((((((((((((((/           ((((((((((                \n"
			<< tabs + "                   /((((((((((((((((((    ((((*((((,                  \n"
			<< tabs + "                      ,(((((((((((((((((((/  .((                      \n"
			<< tabs + "                           ./(((((((((((((/                           \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                  ((                                  \n"
			<< tabs + "                            ,((((((((((                               \n"
			<< tabs + "                                 ((,   (                               \n";
		Sleep(a);
		system("cls");

		//frame 11
		showVertoZilla();
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + " \n"
			<< tabs + "                           /(((((((((((((((*                          \n"
			<< tabs + "                      /(,    .*(((((((((((*   /(,                     \n"
			<< tabs + "                   ((         (  (((((((((((/     (/                  \n"
			<< tabs + "                 (.          ((  ((((((((((((       *(                \n"
			<< tabs + "               (.             (((((((((((((/          //              \n"
			<< tabs + "             .(               (((((((((((((             (             \n"
			<< tabs + "             (              ((((((((((((((,         (((((            \n"
			<< tabs + "            (               *(((((((((((((((   ((((((((((((           \n"
			<< tabs + "           .((((          /((((((((((((((((((    .(((((((((           \n"
			<< tabs + "           .(((((  ((((  .*.((((((((((((((((((((  ((/ ,((((           \n"
			<< tabs + "            ((((((((((((,,(((((((((((((((((((((((((       (           \n"
			<< tabs + "            ((((((((((((((((((/   /(((((((((((((((*      *(           \n"
			<< tabs + "             ((((((((((((((((((((((((((((((((((((((/     (            \n"
			<< tabs + "              (((((((((((((((((*   /.((((((((((((((((( .(             \n"
			<< tabs + "               ((((((((((((           (((((((((((((((((*              \n"
			<< tabs + "                 ((((((((((           /(((((((((((((((                \n"
			<< tabs + "                   /((((((((((((,   ,(((*((((((((((,                  \n"
			<< tabs + "                      ,((((((((((((((,   (((((((                      \n"
			<< tabs + "             (((((((*      ./(((((((((((((/                           \n"
			<< tabs + "               ((((.                                                  \n"
			<< tabs + "               (*  /(                                                 \n"
			<< tabs + "                                                                      \n";
		Sleep(a);
		system("cls");

		//frame 12
		showVertoZilla();
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + " \n"
			<< tabs + "                           /(((((((((((((((*                          \n"
			<< tabs + "                      /(**/((((((((((/        /(,                     \n"
			<< tabs + "                   ((    (  /(((((((((((          (/                  \n"
			<< tabs + "                 (.     ((  ((((((((((((         .((*(                \n"
			<< tabs + "               (.        ((((((((((((((               (/              \n"
			<< tabs + "             .(          (((((((((((((              (((((             \n"
			<< tabs + "             (         *((((((((((((((/         /(((((((((            \n"
			<< tabs + "            (           (((((((((((((((.  (((((((((((((((((           \n"
			<< tabs + "           .(         ((((((((((((((((((     ((((((((((((((           \n"
			<< tabs + "           .( ,(((/  ( ((((((((((((((((((((  ,((..(((((((((           \n"
			<< tabs + "            (((((((/.(((((((((((((((((((((((((        (((((           \n"
			<< tabs + "            ((((((((((((((.  ,((((((((((((((((           /(           \n"
			<< tabs + "    .(       (((((((((((((((((/((((((((((((((((          (            \n"
			<< tabs + "     /((.     ((((((((((((/   ( (((((((((((((((((      .(             \n"
			<< tabs + "     (((,(*,   (((((((.          (((((((((((((((((    (*              \n"
			<< tabs + "    (. .(/       (((((.          ,((((((((((((((((  /(                \n"
			<< tabs + "       *(          /(((((((/    (((((((((((((((((((,                  \n"
			<< tabs + "                      ,(((((((((*   /(((((((((((                      \n"
			<< tabs + "                           ./(((((((((((((/                           \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n";
		Sleep(a);
		system("cls");

		//frame 13
		showVertoZilla();
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + " \n"
			<< tabs + "                           /(((((((((((((((*                          \n"
			<< tabs + "                      /((((((((((/          ((((,                     \n"
			<< tabs + "                   (((  *(((((((((((          .,(((/                  \n"
			<< tabs + "                 (. ((. /(((((((((((.        .((    ((                \n"
			<< tabs + "               (.    ((((((((((((((               (((((/              \n"
			<< tabs + "             .(    . (((((((((((((              (((((((((             \n"
			<< tabs + "             (     *((((((((((((((/         /(((((((((((((            \n"
			<< tabs + "    ((      (       (((((((((((((((   ((((((((((((((((((((           \n"
			<< tabs + "    ((     .(     ((((((((((((((((((     ((((((((((((((((((           \n"
			<< tabs + "  ((((((   .(((  ( ((((((((((((((((((((  ,((..(((((((((((((           \n"
			<< tabs + "    ((      (((/.(((((((((((((((((((((((((        (((((((((           \n"
			<< tabs + "  ,((       (((((((((,  ,((((((((((((((((           ,(((((           \n"
			<< tabs + "             (((((((((((((/((((((((((((((((           ((((            \n"
			<< tabs + "              ((((((((/   ( (((((((((((((((((        /(((             \n"
			<< tabs + "               (((.          (((((((((((((((((      (((*              \n"
			<< tabs + "                 (*          ,((((((((((((((((    *(((                \n"
			<< tabs + "                   /((((    ((((((((((((((((((   ((,                  \n"
			<< tabs + "                      ,(((((*   *(((((((((((((((                      \n"
			<< tabs + "                           .((((((((((((((/                           \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n";
		Sleep(a);
		system("cls");

		//frame 14
		showVertoZilla();
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + "\n";
		cout << tabs + " \n"
			<< tabs + "                           /(((((((((((((((*                          \n"
			<< tabs + "                      /(((((((*         ,(((((((,                     \n"
			<< tabs + "                   (((((((((((((*          ,/(((/ (/                  \n"
			<< tabs + "       ((        ((  ((((((((((((         *(,   ,(((((                \n"
			<< tabs + "      /(       (. (((((((((((((/              .((((((((/              \n"
			<< tabs + "  (((/(,(    .(   (((((((((((((             ,((((((((((((             \n"
			<< tabs + "    .(*  (.  (  (((((((((((((((.         (((((((((((((((((            \n"
			<< tabs + "            (   *(((((((((((((((   ((((((((((((((((((((((((           \n"
			<< tabs + "           .( (((((((((((((((((((    .((((((((((((((((((  (           \n"
			<< tabs + "           .(.*.((((((((((((((((((((  ((/ ,(((((((((((((  (           \n"
			<< tabs + "            (*(((((((((((((((((((((((((       .((((((((((((           \n"
			<< tabs + "            ((((((/   /(((((((((((((((,           *((((((((           \n"
			<< tabs + "             ((((((((((((((((((((((((((/           (((((((            \n"
			<< tabs + "              (((((*   /.(((((((((((((((((        (((((((             \n"
			<< tabs + "               (*         ((((((((((((((((      .((((((*              \n"
			<< tabs + "                 (*       (((((((((((((((((    (((((((                \n"
			<< tabs + "                   /(   *(((*((((((((((((((   (((((,                  \n"
			<< tabs + "                      ,((,   ((((((((((((((/ .((                      \n"
			<< tabs + "                           .((((((((((((((/                           \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n";
		Sleep(a);
		system("cls");

		//frame 15
		showVertoZilla();
		cout << tabs + " \n"
			<< tabs + " \n"
			<< tabs + " \n"
			<< tabs + " \n"
			<< tabs + "            .              /(((((((((((((((*                          \n"
			<< tabs + "           ((         /((((/          (((((((,((,                     \n"
			<< tabs + "        /((((      (((((((((((          .,(((( (( (/                  \n"
			<< tabs + "      ./(/ /(    (((((((((((((         .(/    ((((((((                \n"
			<< tabs + "               ((((((((((((((               (((((((((((/              \n"
			<< tabs + "             .((((((((((((((             .(((((((((((((((             \n"
			<< tabs + "             (((((((((((((((/         /(((((((((((((((((((            \n"
			<< tabs + "            (.(((((((((((((((.  (((((((((((((((((((((((  *(           \n"
			<< tabs + "           .((((((((((((((((((     ((((((((((((((((((.    (           \n"
			<< tabs + "           .(((((((((((((((((((((  *((..(((((((((((((*    (           \n"
			<< tabs + "            ((((((((((((((((((((((((        (((((((((((,  (           \n"
			<< tabs + "            (((/.  ,((((((((((((((((           *((((((((           \n"
			<< tabs + "             (((((((/((((((((((((((((           ((((((((((            \n"
			<< tabs + "              ((/   ( (((((((((((((((((        ((((((((((             \n"
			<< tabs + "               (*      ((((((((((((((((/      (((((((((*              \n"
			<< tabs + "                 (*    *((((((((((((((((    /(((((((((                \n"
			<< tabs + "                   /(.((((((((((((((((((   ((((((((,                  \n"
			<< tabs + "                      ,(( /((((((((((((((  (((((                      \n"
			<< tabs + "                           ./(((((((((((((/                           \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n";
		Sleep(a);
		system("cls");

		//frame 16
		showVertoZilla();
		cout << tabs + " \n"
			<< tabs + " \n"
			<< tabs + " \n"
			<< tabs + "           *,,..((*                                                    \n"
			<< tabs + "             ((((          /(((((((((((((((*                          \n"
			<< tabs + "         ,(((  /(     /((,         *(((((((*((((,                     \n"
			<< tabs + "                   (((((/((*          ,/(((/.(,   (/                  \n"
			<< tabs + "                 (((((((((((         /(.   *((((((((((                \n"
			<< tabs + "               (((((((((((*              ,(((((((((((((/              \n"
			<< tabs + "             .(((((((((((*             *((((((((((((((* (             \n"
			<< tabs + "             (((((((((((((         .((((((((((((((((((((((            \n"
			<< tabs + "            (((((((((((((((   (((((((((((((((((((((((    *(           \n"
			<< tabs + "           .(((((((((((((((/    ,((((((((((((((((((       (           \n"
			<< tabs + "           .(((((((((((((((((((  ((* *(((((((((((((       (           \n"
			<< tabs + "            (((((((((((((((((((((/       ,(((((((((((.    (           \n"
			<< tabs + "            (/   ((((((((((((((((.           /(((((((((((((           \n"
			<< tabs + "             ((((/((((((((((((((((*          .((((((((((((            \n"
			<< tabs + "              (   *,(((((((((((((((((        ((((((((((((             \n"
			<< tabs + "               (*    ((((((((((((((((      ,(((((((((((*              \n"
			<< tabs + "                 (*  ((((((((((((((((*    ((((((((((((                \n"
			<< tabs + "                   /(((,((((((((((((((   ((((((((((,                  \n"
			<< tabs + "                      ,(((((((((((((((*  (((((((                      \n"
			<< tabs + "                           ./(((((((((((((/                           \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n";
		Sleep(a);
		system("cls");

		//frame 17
		showVertoZilla();
		cout << tabs + " \n"
			<< tabs + " \n"
			<< tabs + "                ,((/(((                                                \n"
			<< tabs + "             (/,(((,(.                                                 \n"
			<< tabs + "                   *(      /(((((((((((((((*                          \n"
			<< tabs + "                      /(,        ,(((((((,(((*/(,                     \n"
			<< tabs + "                   ((((((*          ,/(((/ (*   ,,(/                  \n"
			<< tabs + "                 (((((((((         *(.   ,((((((((((((                \n"
			<< tabs + "               (((((((((/              .(((((((((((((((/              \n"
			<< tabs + "             .(((((((((/             *((((((((((((((*   (             \n"
			<< tabs + "             (((((((((((         .((((((((((((((((((((((///(            \n"
			<< tabs + "            (((((((((((((   (((((((((((((((((((((((    *(           \n"
			<< tabs + "           .((((((((((((((    .((((((((((((((((((         (           \n"
			<< tabs + "           .(((((((((((((((((  ((/ ,(((((((((((((         (           \n"
			<< tabs + "            (((((((((((((((((((/       ,(((((((((((.      (           \n"
			<< tabs + "            (  /(((((((((((((((,           *(((((((((((((((           \n"
			<< tabs + "             (((((((((((((((((((*          .((((((((((((            \n"
			<< tabs + "              (   *,(((((((((((((((((        ((((((((((((             \n"
			<< tabs + "               (*    ((((((((((((((((      ,(((((((((((*              \n"
			<< tabs + "                 (*  ((((((((((((((((*    ((((((((((((                \n"
			<< tabs + "                   /(*((((((((((((((   ((((((((((,                  \n"
			<< tabs + "                      ,(((((((((((((/  (((((((((                      \n"
			<< tabs + "                           ./(((((((((((((/                           \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n";
		Sleep(a);
		system("cls");

		//frame 18
		showVertoZilla();
		cout << tabs + " \n"
			<< tabs + "                     (((,(((*                                          \n"
			<< tabs + "                 ((/(((((*                                             \n"
			<< tabs + "                       (*                                              \n"
			<< tabs + "                           /(((((((((((((((*                          \n"
			<< tabs + "                      /(,       (((((((,(((/  /(,                     \n"
			<< tabs + "                   (((((          .,(((( ((   .,,((/                  \n"
			<< tabs + "                 (((((((.         ((    ((((((((((((*(                \n"
			<< tabs + "               ((((((((               (((((((((((((((((/              \n"
			<< tabs + "             .((((((((              (((((((((((((((    .(             \n"
			<< tabs + "             ((((((((((         *(((((((((((((((((((*//(((            \n"
			<< tabs + "            (((((((((((,  (((((((((((((((((((((((        *(           \n"
			<< tabs + "           .((((((((((((     ((((((((((((((((((*          (           \n"
			<< tabs + "           .(((((((((((((((  .((..((((((((((((((          (           \n"
			<< tabs + "            ((((((((((((((((((        (((((((((((*        (           \n"
			<< tabs + "            (,((((((((((((((           .(((((((((((((( *(           \n"
			<< tabs + "             (/((((((((((((((((           (((((((((((((( (            \n"
			<< tabs + "              ( (((((((((((((((((        *(((((((((((((/(             \n"
			<< tabs + "               (*/((((((((((((((((      (((((((((((((((*              \n"
			<< tabs + "                 (((((((((((((((((    ,(((((((((((((((                \n"
			<< tabs + "                   /((((((((((((((   ((((((((((((((,                  \n"
			<< tabs + "                      ,((((((((((((  /((((((((((                      \n"
			<< tabs + "                           ./(((((((((((((/                           \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n";
		Sleep(a);
		system("cls");

		//frame 19
		showVertoZilla();
		cout << tabs + "                        (,                                       \n"
			<< tabs + "                    **   ((((((*                                       \n"
			<< tabs + "                      ,,  ((                                           \n"
			<< tabs + "                          (                                            \n"
			<< tabs + "                           /(((((((((((((((*                          \n"
			<< tabs + "                      /(,     .(((((((,(((*   /(,                     \n"
			<< tabs + "                   (((/          .*(((( (/   ,,*(((/                  \n"
			<< tabs + "                 ((((((         ,(*   .(((((((((((/ ((                \n"
			<< tabs + "               (((((((              .((((((((((((((((((/              \n"
			<< tabs + "             .(((((((             ,(((((((((((((((    . (             \n"
			<< tabs + "             ((((((((,         ((((((((((((((((((((///((((            \n"
			<< tabs + "            ((((((((((   (((((((((((((((((((((((         *(           \n"
			<< tabs + "           .(((((((((((    .((((((((((((((((((            (           \n"
			<< tabs + "           .((((((((((((((  ((( ,(((((((((((((.           (           \n"
			<< tabs + "            (((((((((((((((((       .(((((((((((,         (           \n"
			<< tabs + "            (((((((((((((((((           *((((((((((((((  *(           \n"
			<< tabs + "             (((((((((((((((((           ((((((((((((((  (            \n"
			<< tabs + "              ((((((((((((((((((        (((((((((((((( .(             \n"
			<< tabs + "               (((((((((((((((((,      ((((((((((((((((*              \n"
			<< tabs + "                 (((((((((((((((/    (((((((((((((((((                \n"
			<< tabs + "                   /(((((((((((((   (((((((((((((((,                  \n"
			<< tabs + "                      ,(((((((((((  ((((((((((((                      \n"
			<< tabs + "                           ./(((((((((((((/                           \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n";
		Sleep(a);
		system("cls");

		//frame 20
		showVertoZilla();
		cout << tabs + "                           /(/                                         \n"
			<< tabs + "                        (((((((((,                                     \n"
			<< tabs + "                            *(/                                        \n"
			<< tabs + "                            .                                          \n"
			<< tabs + "                           /(((((((((((((((*                          \n"
			<< tabs + "                      /(,    .(((((((,(((*    /(,                     \n"
			<< tabs + "                   ((/          .*(((( (/   ,,*((((/                  \n"
			<< tabs + "                 (((((         ,(,   .(((((((((((( (((                \n"
			<< tabs + "               (((((/               (((((((((((((((((((/              \n"
			<< tabs + "             .((((((             ,((((((((((((((/    .  (             \n"
			<< tabs + "             (((((((,         ((((((((((((((((((((///(((((            \n"
			<< tabs + "            (((((((((   (((((((((((((((((((((((          ((           \n"
			<< tabs + "           .((((((((((     (((((((((((((((((             (           \n"
			<< tabs + "           .(((((((((((((  /(/ ,(((((((((((((.            (           \n"
			<< tabs + "            ((((((((((((((((       .(((((((((((,  .       (           \n"
			<< tabs + "            (((((((((((((((*           *(((((((((((((/   *(           \n"
			<< tabs + "             ((((((((((((((((           (((((((((((((/   (            \n"
			<< tabs + "              (((((((((((((((((        ((((((((((((((  .(             \n"
			<< tabs + "               (((((((((((((((((.      (((((((((((((((((*              \n"
			<< tabs + "                 (((((((((((((((    ((((((((((((((((((                \n"
			<< tabs + "                   /((((((((((((   ((((((((((((((((,                  \n"
			<< tabs + "                      ,(((((((((/  (((((((((((((                      \n"
			<< tabs + "                           ./(((((((((((((/                           \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n";
		Sleep(a);
		system("cls");

		//frame 21
		showVertoZilla();
		cout
			<< tabs +"                              ((*                                      \n"
			<< tabs +"                          /(((((((*,                                  \n"
			<< tabs +"                              /(.                                      \n"
			<< tabs +"                                                                      \n"
			<< tabs +"                           /(((((((((((((((*                          \n"
			<< tabs +"                      /(,    (((((((,(((/     /(,                     \n"
			<< tabs +"                   ((          .,(((( ((   ,,*(((((/                  \n"
			<< tabs +"                 ((((         .(/    (((((((((((( ((((                \n"
			<< tabs +"               (((((               ((((((((((((((((((((/              \n"
			<< tabs +"             .(((((              (((((((((((((((    .  .(             \n"
			<< tabs +"             (((((((         /(((((((((((((((((((*//((((((            \n"
			<< tabs +"            ((((((((.  (((((((((((((((((((((((          (((           \n"
			<< tabs +"           .(((((((((     (((((((((((((((((             (           \n"
			<< tabs +"           .((((((((((((  ,((..(((((((((((((/             (           \n"
			<< tabs +"            (((((((((((((((        (((((((((((*           (           \n"
			<< tabs +"            ((((((((((((((((           ,((((((((((((((    *(           \n"
			<< tabs +"             ((((((((((((((((           ((((((((((((((    (            \n"
			<< tabs +"              (((((((((((((((        /(((((((((((((.  .(             \n"
			<< tabs +"               ((((((((((((((((      (((((((((((((((( (*              \n"
			<< tabs +"                 ((((((((((((((    /((((((((((((((((((                \n"
			<< tabs +"                   /(((((((((((   (((((((((((((((((,                  \n"
			<< tabs +"                      ,(((((((((  ((((((((((((((                      \n"
			<< tabs +"                           ./(((((((((((((/                           \n"
			<< tabs +"                                                                      \n"
			<< tabs +"                                                                      \n"
			<< tabs + "                                                                      \n";
		Sleep(a);
		system("cls");

		//frame 22
		showVertoZilla();
		cout
			<< tabs + "                           (    ((,                                    \n"
			<< tabs + "                            ,(((((((*,                                \n"
			<< tabs + "                                ((                                    \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                           /(((((((((((((((*                          \n"
			<< tabs + "                      /(,   (((((((//(((.     /(,                     \n"
			<< tabs + "                   ((          ,((((,/(   .,,((((((/                  \n"
			<< tabs + "                 (((/         ((    /(((((((((((. ((((                \n"
			<< tabs + "               ((((.              /(((((((((((((((((((//              \n"
			<< tabs + "             .((((              (((((((((((((((.    .  /(             \n"
			<< tabs + "             ((((((         .(((((((((((((((((((///(((((((            \n"
			<< tabs + "            ((((((((  ,((((((((((((((((((((((/         .(((           \n"
			<< tabs + "           .((((((((*    (((((((((((((((((((              (           \n"
			<< tabs + "           .(((((((((((/  ((, /(((((((((((((              (           \n"
			<< tabs + "            ((((((((((((((.       /((((((((((/.           (           \n"
			<< tabs + "            (((((((((((((           .((((((((((((((     *(           \n"
			<< tabs + "             ((((((((((((((,          *(((((((((((((     (            \n"
			<< tabs + "              (((((((((((((((/        ((((((((((((((   .(             \n"
			<< tabs + "               (((((((((((((((      /(((((((((((((((/ (*              \n"
			<< tabs + "                 (((((((((((((     (((((((((((((((((((                \n"
			<< tabs + "                   /((((((((((/  .(((((((((((((((((,                  \n"
			<< tabs + "                      ,((((((((.  ((((((((((((((                      \n"
			<< tabs + "                           ./(((((/(((((((/                           \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n"
			<< tabs + "                                                                      \n";
		Sleep(100);
		system("cls");
	}

	void showMiniVertoZilla() {
		system("cls");
		cout << " \n\n";
		cout << "  ____   ____                __         __________.__ .__   .__           \n";
		cout << "  \\   \\ /   / ____ _______ _/  |_  ____ \\____    /|__||  |  |  |  _____   \n";
		cout << "   \\   Y   /_/ __ \\\\_  __ \\\\   __\\/  _ \\  /     / |  ||  |  |  |  \\__  \\  \n";
		cout << "    \\     / \\  ___/ |  | \\/ |  | (  <_> )/     /_ |  ||  |__|  |__ / __ \\_\n";
		cout << "     \\___/   \\___  >|__|    |__|  \\____//_______ \\|__||____/|____/(____  /\n";
		cout << "                 \\/                             \\/                     \\/ \n\n\n";

	}

	void showLoading(int a) {
		//frame 1
		cout << "             ,((/.             \n"
			<< "       (. .(((( ((    *(      \n"
			<< "    ((     ((* (((((((((( (   \n"
			<< "  ((/         ((((((((((..  , \n"
			<< " (((/      /((((((((((( (((((/\n"
			<< " ((((  ((((((((((((((       ,, \n"
			<< "(((((((/ (/ ((((((((,          \n"
			<< " ((((((((      ((((((((((    * \n"
			<< " (((((((((       (((((((((   / \n"
			<< "  *(((((((((    (((((((((( ,.  \n"
			<< "    ((((((((  ((((((((((((*    \n"
			<< "       (((((. (((((((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 2
		cout << "             ,((/.            \n"
			<< "       (. /((((*((    /(      \n"
			<< "    (*     (( .((((((((/( (   \n"
			<< "  ((          ((((((((((..  , \n"
			<< " (((       (((((((((((/,(((((/\n"
			<< " ((((  (((((((((((((/       (,\n"
			<< "(((((((  (.,((((((((          \n"
			<< " ((((((((      ((((((((((    *\n"
			<< " (((((((((      ,((((((((    /\n"
			<< "  *((((((((    .(((((((((, ,. \n"
			<< "    (((((((/  ((((((((((((*   \n"
			<< "       (((((  (((((((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 3
		cout << "             ,((/.            \n"
			<< "       (./((((,((    *((      \n"
			<< "    (     ((. ((((((((/(  (   \n"
			<< "  (.         ((((((((((..   , \n"
			<< " ((       (((((((((((/.((((( /\n"
			<< " (((  (((((((((((((/       ( ,\n"
			<< "((((((  (,,((((((((           \n"
			<< " (((((((      ((((((((((     *\n"
			<< " ((((((((       ((((((((    ,/\n"
			<< "  *(((((((.    (((((((((*  ,. \n"
			<< "    (((((((  (((((((((((((*   \n"
			<< "       ((((  ((((((((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 4
		cout << "             ,((/.            \n"
			<< "       ((((( ((     ((((      \n"
			<< "    (   ((* ((((((((((    (   \n"
			<< "  (        ((((((((((,.     , \n"
			<< " (      /((((((((((( (((((   /\n"
			<< " (  ((((((((((((((       ,   (\n"
			<< "((((/ (/ ((((((((,          .(\n"
			<< " (((((      ((((((((((      ((\n"
			<< " ((((((       (((((((((    ((/\n"
			<< "  *((((((    ((((((((((   (/. \n"
			<< "    (((((  (((((((((((((((*  \n"
			<< "       ((. ((((((((((((/      \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 5
		cout << "             ,((/.            \n"
			<< "       (( ((     (((((((      \n"
			<< "    (*(/ ((((((((((       (   \n"
			<< "  (     ((((((((((,.        , \n"
			<< " (   *((((((((((( (((((.     /\n"
			<< " (((((((((((((        .  (( ,\n"
			<< "(( (( ((((((((/           *((\n"
			<< " ((      ((((((((((,     *((((\n"
			<< " (((.      (((((((((    (((((/\n"
			<< "  *(((    ((((((((((   ((,((. \n"
			<< "    ((  ,(((((((((((((((((*   \n"
			<< "       ((((((((((((((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 6
		cout << "             ,((/.            \n"
			<< "       (,    (((((((((((      \n"
			<< "    (((((((((((           (   \n"
			<< "  ( ((((((((((,.            , \n"
			<< " (((((((((((( (((((.         /\n"
			<< " ((((((((((        .  ((     ,\n"
			<< "( ((((((((/           /(((  ((\n"
			<< " .   ((((((((((.     /(((((((\n"
			<< " (     (((((((((    (((((((((/\n"
			<< "  *   ((((((((((   (/,((((((. \n"
			<< "    ((((((((((((((((((((((*   \n"
			<< "       ((((((((((((((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 7
		cout << "             ,((/.            \n"
			<< "       ((((((((((((.  *(      \n"
			<< "    ((((((                (   \n"
			<< "  (((((((*.                 , \n"
			<< " ((((((( (((((*             //\n"
			<< " (((((        *  ((         .(\n"
			<< "((((((           ,(((  ((* *(*\n"
			<< " (((((((((*     ,((((((((((((\n"
			<< " (((((((((    ((((((((((((((/ \n"
			<< "  *((((((((   /(.(((((((((((. \n"
			<< "    ((((((((((((((((((((((*   \n"
			<< "       ((((((((((((((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 8
		cout << "             ,((/.            \n"
			<< "       (((((((   .(   *(      \n"
			<< "    (                   ( (   \n"
			<< "  ((,.                  ((((, \n"
			<< " (( (((((              ((((((/\n"
			<< "            ((         *(((((\n"
			<< "(           /(((  ((  .((((((\n"
			<< " ((((.     /((((((((((((  ((((\n"
			<< " (((((    (((((((((((((((((((/\n"
			<< "  *(((   (/,(((((((((((    ,. \n"
			<< "    (((((((((((((((((((  ,*   \n"
			<< "       ((((((((((((((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 9
		cout << "             ,((/.            \n"
			<< "       ((,   (      *(((      \n"
			<< "    (              ( ,(((((   \n"
			<< "  (                 ((((((((, \n"
			<< " (((/             *((((((((( / \n"
			<< "    /  ((          ((((((((((,\n"
			<< "(      .(((. ((( /(((((((((((\n"
			<< " .    .((((((((((((  ((((((((\n"
			<< " (   ((((((((((((((((((((((((/\n"
			<< "  * *(.(((((((((((      .(((. \n"
			<< "    ((((((((((((((       (*   \n"
			<< "       ((((((((((((((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 10
		cout << "             ,((/.            \n"
			<< "       (,(      /(((((((      \n"
			<< "    (          ( (((((((( (   \n"
			<< "  (            /((((((((    , \n"
			<< " (            ((((((((((     /\n"
			<< "   ((         *(((((((((* ((((\n"
			<< "(  /(((  ((  .((((((((((((( /(\n"
			<< "  *((((((((((((  (((((((((((,*\n"
			<< " ((((((((((((((((((((((((((((/\n"
			<< "  *(((((((((((      /(((((((. \n"
			<< "    ((((((((((      *(((((*   \n"
			<< "       (((((((((((((, (/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 11
		cout << "             ,((/.            \n"
			<< "       (.   ,/((((((  *(      \n"
			<< "    (      (. (((((((,    (   \n"
			<< "  (         ((((((((        , \n"
			<< " (         (((((((((       ((/\n"
			<< " .         ((((((((((  ((((((\n"
			<< "(((( ((( (.((((((((((((  (.,((\n"
			<< " ((((((((((/ ((((((((((((    *\n"
			<< " ((((((((((((((((((((((((   /\n"
			<< "  *(((((((       ((((((((((*. \n"
			<< "    ((((((*      (((((((((*   \n"
			<< "       ((((((((((  ((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 12
		cout << "             ,((/.            \n"
			<< "       (.,(((((((     *(      \n"
			<< "    (   (. (((((((*     (((   \n"
			<< "  (      ((((((((          (,\n"
			<< " (      (((((((((       (((((/\n"
			<< "        ((((((((((  ((((((((((\n"
			<< "( ((( (.((((((((((((  (.,(((((\n"
			<< " (((((((/ ((((((((((((      ((\n"
			<< " ((((((((((((((((((((((      /\n"
			<< "  *((((       ((((((((((   ,. \n"
			<< "    (((*      (((((((((((,*   \n"
			<< "       (((((((  (((((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 13
		cout << "             ,((/.            \n"
			<< "       (((((((       (((      \n"
			<< "    ( ( ((((((((     .(( ((   \n"
			<< "  (   (((((((((         ((((, \n"
			<< " (   (/((((((((      ,(((((((/\n"
			<< "     /(((((((((, ((((((((((((\n"
			<< "((  .((((((((((((( (( (((((((\n"
			<< " (((((  (((((((((((,     /(((\n"
			<< " (((((((((((((((((((*      ((/\n"
			<< "  *((      (((((((((((    ((. \n"
			<< "    (      *((((((((((  .(*   \n"
			<< "       ((((. .(((((((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 14
		cout << "             ,((/.            \n"
			<< "       (((((       (((((      \n"
			<< "    ( ((((((((     *(/ ((((   \n"
			<< "  ( (((((((((         ((((((, \n"
			<< " ( (/((((((((      *(((((((((/\n"
			<< "   ((((((((((. ((((((((((((((,\n"
			<< "(  ((((((((((((( (( ((((((((/ \n"
			<< " (((  (((((((((((      ((((((\n"
			<< " ((((((((((((((((.      ((((/\n"
			<< "  *      (((((((((((    ((((. \n"
			<< "    (    (((((((((((  *(((*   \n"
			<< "       ((. ,((((((((/ (/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 15
		cout << "             ,((/.            \n"
			<< "       (((,      ((((,((      \n"
			<< "    ((((((((      (( /(((((   \n"
			<< "  (((((((((         ,(((((((, \n"
			<< " ((((((((((       (((((((((((/\n"
			<< " ,(((((((((/ ((((((((((((((  ,\n"
			<< "(((((((((((((( *( (((((((((   \n"
			<< " (  ((((((((((((     *(((((((\n"
			<< " (((((((((((((((/      ((((((/\n"
			<< "  *    *((((((((((    ((((((. \n"
			<< "    (  .((((((((((   (((((*   \n"
			<< "       (/ ((((((((( (((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 16
		cout << "             ,((/.            \n"
			<< "       ((      .(((( (((      \n"
			<< "    (((((((     ((, (((((((   \n"
			<< "  (((((((/         (((((((((, \n"
			<< " ((((((((*      /((((((((((( /\n"
			<< " (((((((((  ((((((((((((((   ,\n"
			<< "((((((((((((/ (*.((((((((.    \n"
			<< " .*(((((((((((      (((((((((\n"
			<< " ((((((((((((((       (((((((/\n"
			<< "  *   ((((((((((/    (((((((. \n"
			<< "    ( (((((((((((  (((((((*   \n"
			<< "       ((((((((((  ((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 17
		cout << "             ,((/.            \n"
			<< "       (.     /((((*((*(      \n"
			<< "    (((((,     (( .((((((((   \n"
			<< "  ((((((          ((((((((((, \n"
			<< " (((((((       (((((((((((/*(/ \n"
			<< " ((((((((  (((((((((((((/    ,\n"
			<< "((((((((((  (.,((((((((      \n"
			<< " ((((((((((      ((((((((((*\n"
			<< " (((((((((((      .((((((((/\n"
			<< "  *  ((((((((((    .((((((((. \n"
			<< "    ((((((((((((  ((((((((*   \n"
			<< "       (((((((((  (((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 18
		cout << "             ,((/.            \n"
			<< "       (.    /((((*(( *(      \n"
			<< "    ((((*     (( .(((((((((   \n"
			<< "  (((((          ((((((((((,, \n"
			<< " ((((((       (((((((((((/,((/\n"
			<< " (((((((  (((((((((((((/     ,\n"
			<< "((((((((((  (.,((((((((       \n"
			<< " ((((((((((      (((((((((( *\n"
			<< " (((((((((((      ,(((((((( /\n"
			<< "  * ((((((((((    .(((((((((. \n"
			<< "    ((((((((((/  (((((((((*   \n"
			<< "       ((((((((  ((((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 19
		cout << "             ,((/.            \n"
			<< "       (.   ,(((( ((  *(      \n"
			<< "    ((((     ((, ((((((((/(   \n"
			<< "  ((((*         ((((((((((.,, \n"
			<< " (((((*      (((((((((((( (((/\n"
			<< " ((((((  ((((((((((((((      ,\n"
			<< "(((((((((* (*.((((((((        \n"
			<< " ((((((((((      ((((((((((  *\n"
			<< " (((((((((((       ((((((((* /\n"
			<< "  *((((((((((*    ((((((((((. \n"
			<< "    ((((((((((  ((((((((((*   \n"
			<< "       (((((((  (((((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 20
		cout << "             ,((/.            \n"
			<< "       (.   ((((.((*  *(      \n"
			<< "    (((      (( (((((((((((   \n"
			<< "  ((((         ((((((((((*.., \n"
			<< " (((((      ,((((((((((( ((((/\n"
			<< " (((((* ((((((((((((((       ,\n"
			<< "((((((((( (( (((((((((        \n"
			<< " (((((((,(     /(((((((((/  *\n"
			<< " (((((((( (*      (((((((((  /\n"
			<< "  *(((((((((    ((((((((((,. \n"
			<< "    (((((((((   ((((((((((*   \n"
			<< "       ((((((( ((((((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 21
		cout << "             ,((/.            \n"
			<< "       (.  /((((,((   *(      \n"
			<< "    ((*     ((..((((((((/((   \n"
			<< "  (((.         ((((((((((.. , \n"
			<< " ((((       (((((((((((/,((((/\n"
			<< " (((((  (((((((((((((/       (\n"
			<< "((((((((  (,,((((((((         \n"
			<< " (((((((((      ((((((((((   *\n"
			<< " ((((((((((      .((((((((   /\n"
			<< "  *(((((((((     (((((((((,,. \n"
			<< "    (((((((((  (((((((((((*   \n"
			<< "       ((((((  ((((((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 22
		cout << "             ,((/.            \n"
			<< "       (.  ((((,(((   *(      \n"
			<< "    ((      (( /(((((((((*(   \n"
			<< "  (((         ,(((((((((/.. , \n"
			<< " ((((       (((((((((((.(((((/\n"
			<< " ((((/ ((((((((((((((        (\n"
			<< "(((((((( *( (((((((((         \n"
			<< " (((((((((     *((((((((((   *\n"
			<< " ((((((((((      (((((((((   /\n"
			<< "  *(((((((((    (((((((((( ,. \n"
			<< "    ((((((((   (((((((((((*   \n"
			<< "       (((((( (((((((((/       \n"
			<< "           ((((((((/       \n";
		Sleep(a);
		system("cls");

		//frame 23
		cout << "             ,((/.            \n"
			<< "       (. .(((( ((    *(      \n"
			<< "    ((     ((* (((((((((( (   \n"
			<< "  ((/         ((((((((((..  , \n"
			<< " (((/      /((((((((((( (((((/\n"
			<< " ((((  ((((((((((((((       ,, \n"
			<< "(((((((/ (/ ((((((((,         \n"
			<< " ((((((((      ((((((((((    *\n"
			<< " (((((((((       (((((((((   /\n"
			<< "  *((((((((/    (((((((((( ,. \n"
			<< "    ((((((((  ((((((((((((*   \n"
			<< "       (((((. (((((((((/       \n"
			<< "           ((((((((/       \n";

	}

	TourAgency(string name) { system("title VertoZilla.exe"); setName(name); price = 0; loadAllInfo(map); cout << "For better experience fullscreen this window\n"; system("pause"); system("cls"); displayMain(); }
	~TourAgency() {}

	void setName(string _name) {}
	string getName()const { return name; }

	void loadAllInfo(Map& map) {

		//system("cls");
		//cout << "//";
		//for (int i = 0; i < 100; i++) {
		//	cout << '=';
		//}
		//cout << "\\\\\n";
		//cout << "||";
		////cool loading screen
		//for (int i = 0; i < 100; i++){
		//	cout << 'Ы';
		//	
		//	Sleep(50);
		//}
		//cout << "||\n";
		//cout << "\\\\";
		//for (int i = 0; i < 100; i++) {
		//	cout << '=';
		//}
		//cout << "//\n";

		/*string str;
		ifstream file1("data/UserData.txt");
		while (getline(file1, str)) {
			getline(file1, str);
		}*/
		
		
		ifstream file("data/TourAgencyData.txt");
		if (file.is_open()) {
			file >> name;
			file >> loggedIn;
			file >> price;
		}
		else {
			cout << "|  File couldn't open!\n";
		}
		
		tour_arr.loadFromFile("data/TourArray.txt");

		fServ.loadFoodServicesFromFile("TestFoodData.txt", map);

		//Hotels
		hArr.loadInfo("data/hotelData.txt");

		ifstream file1("data/UserData.txt");
		int intVar;
		if (file1.is_open()) {
			file1 >> intVar;
			for (int i = 0; i < intVar; i++)
			{
				/*User usTmp;
				usTmp.loadFromUserFile(file1);
				users.push_back(usTmp);*/
				User* b = new User();
				b->loadFromUserFile(file1);
				users.push_back(*b);
			}
			file1.close();
		}
		else {
			cout << "|  File couldn't open!\n";
		}
		system("cls");
		
	}

	void saveAllInfo() {
		//Global Directory URL
		string fileDir = "data/";

		//Hotels

	}

	void displayMain() {
		int chooseTmp;
		string s_choose;

		/*users.push_back(User());
		users[0].setLogin("admin");
		users[0].setPassword("admin");
		users[0].setUserPhone("12344667890");
		users[0].setUserName("admin");
		loggedIn = 0;*/

		/*HANDLE console_color = GetStdHandle(STD_OUTPUT_HANDLE);
		SetConsoleTextAttribute(console_color, 2);
		
		for (int i = 0; i < 3; i++)
		{
			showPlane(100);
		}
		SetConsoleTextAttribute(console_color, 7);
		system("cls");*/
		do
		{
			showMiniVertoZilla();
			if (loggedIn == -1) {
				/*do {
					
				} while (chooseTmp != 0);*/
				cout << "                        Welcome to Tour agency!" << endl;
				cout << " ====================================================================== >\n";
				cout << "|   1. Show Hotels\n";
				cout << "|   2. Show Tours\n";
				cout << "|   3. Show Food Services\n";
				cout << "|   4. Show Map\n";
				cout << "|   5. Make an order\n";
				cout << "|   6. Log in\n";
				cout << "|   0. Exit\n";
				cout << " =========================== >\n";
				cout << "\n > > > ";
				cin >> chooseTmp;
				switch (chooseTmp)
				{
				case 0:
					break;
				case 1:
					system("cls");
					showMiniVertoZilla();
					cout << endl;
					if (hArr.size() == 0) {
						cout << "There are no hotels, at least for now.\n";
					}
					else {
						hArr.showHotelForClients();
					}
					break;
				case 2:
					try {
						system("cls");
						showMiniVertoZilla();
						cout << endl;
						try {
							tour_arr.showAllForClient();
						}
						catch (TourArrayException* err) {
							err->message();
							delete err;
						}
						break;
					}
					catch (TourArrayException* err) { err->message(); delete err; }
				case 3:
					system("cls");
					showMiniVertoZilla();
					cout << endl;
					fServ.editForClient(true);
					break;
				case 4:
					try {
						system("cls");
						showMiniVertoZilla();
						cout << endl;
						int intVar;
						string stringVar;
						string stringVar1;
						map.show();
						do
						{
							cout << "\n1. Calculate distance.\n";
							cout << "2. Leave.\n";
							cin >> intVar;
							switch (intVar)
							{
							case 1:
								cout << "Enter first name of establishment: ";
								cin.ignore();
								getline(cin, stringVar);
								cout << "Enter second name of establishment: ";
								getline(cin, stringVar1);
								cout << "Distance between " << stringVar << " and " << stringVar1 << ": " << map.calcDistance(stringVar, stringVar1) << " km\n";
								break;
							case 2:
								break;
							default:
								cout << "|   Input error!\n";
								break;
							}

						} while (intVar != 2);
						break;
					}
					catch (MapException* err) { cout << err->message(); delete err; }
				case 5: {
					system("cls");
					showMiniVertoZilla();
					cout << endl;
					verification();
					cout << "Input categories on which you wish to make an order: \n";
					cout << "1. Hotel\n";
					cout << "2. Retoraunt\n";
					cout << "3. Tour\n";

					int t_one = 0, t_two = 0, t_tree = 0;
					do
					{
						cout << "Input your choice: ";
						cin.ignore();
						getline(cin, s_choose);
						for (int i = 0; i < s_choose.length(); i++) {
							if (s_choose[i] == '1' || s_choose[i] == '2' || s_choose[i] == '3') {
								int intVar = s_choose[i] - '0';
								switch (intVar)
								{
								case 1:
									t_one = 1;
									break;
								case 2:
									t_two = 1;
									break;
								case 3:
									t_tree = 1;
									break;
								default:
									break;
								}
							}
							// 1 2 3
						}
					} while (t_one == 0 && t_two == 0 && t_tree == 0);
					makeOrder(t_one, t_two, t_tree);
					break;
				}
				case 6:
					system("cls");
					showMiniVertoZilla();
					cout << endl;
					verification();
					break;
				default:
					break;
				}
			}
			else {
				cout << "Welcome to Tour agency: " + getName() << endl;
				cout << "===============================\n";
				cout << "1. Show Hotels\n";
				cout << "2. Show Tours\n";
				cout << "3. Show Food Services\n";
				cout << "4. Show Map\n";
				cout << "5. Make an order\n";
				cout << "6. My account\n";
				cout << "7. Log out\n";
				cout << "0. Exit\n";
				cout << "===============================\n";
				cin >> chooseTmp;
				switch (chooseTmp)
				{
				case 0:
					break;
				case 1:
					system("cls");
					showMiniVertoZilla();
					cout << endl;
					if (hArr.size() == 0) {
						cout << "There are no hotels, at lest for now.\n";
					}
					else {
						hArr.showHotelForClients();
					}
					break;
				case 2:
					try {
						system("cls");
						showMiniVertoZilla();
						cout << endl;
						try {
							tour_arr.showAllForClient();
						}
						catch (TourArrayException* err) {
							err->message();
							delete err;
						}
						break;
					}
					catch (TourArrayException* err) { err->message(); delete err; }
				case 3:
					system("cls");
					showMiniVertoZilla();
					cout << endl;
					fServ.editForClient(true);
					break;
				case 4:
				{
					try {
						system("cls");
						showMiniVertoZilla();
						cout << endl;
						int intVar;
						string stringVar;
						string stringVar1;
						map.show();
						do
						{
							cout << "\n1. Calculate distance.\n";
							cout << "2. Leave.\n";
							cin >> intVar;
							switch (intVar)
							{
							case 1:
								cout << "Enter first name of establishment: ";
								cin.ignore();
								getline(cin, stringVar);
								cout << "Enter second name of establishment: ";
								getline(cin, stringVar1);
								cout << "Distance between " << stringVar << " and " << stringVar1 << ": " << map.calcDistance(stringVar, stringVar1) << " km\n";
								break;
							case 2:
								break;
							default:
								cout << "|   Input error!\n";
								break;
							}

						} while (intVar != 2);
						break;
					}
					catch (MapException* err) { cout << err->message(); delete err; }
				}
				case 5: {
					system("cls");
					showMiniVertoZilla();
					cout << endl;
					cout << "Input categories on which you wish to make an order: \n";
					cout << "1. Hotel\n";
					cout << "2. Retoraunt\n";
					cout << "3. Tour\n";

					int t_one = 0, t_two = 0, t_tree = 0;
					do
					{
						cout << "Input your choice: ";
						cin.ignore();
						getline(cin, s_choose);
						for (int i = 0; i < s_choose.length(); i++) {
							if (s_choose[i] == '1' || s_choose[i] == '2' || s_choose[i] == '3') {
								int intVar = s_choose[i] - '0';
								switch (intVar)
								{
								case 1:
									t_one = 1;
									break;
								case 2:
									t_two = 1;
									break;
								case 3:
									t_tree = 1;
									break;
								default:
									break;
								}
							}
						}
					} while (t_one == 0 && t_two == 0 && t_tree == 0);
					makeOrder(t_one, t_two, t_tree);
					break;
				}
				case 6:
					system("cls");
					showMiniVertoZilla();
					cout << endl;
					users[loggedIn].showUser();
					break;
				case 7:
				{
					system("cls");
					showMiniVertoZilla();
					cout << endl;
					string str;
					cout << "Are you sure you want to log out?\n";
					do {
						cout << "Your choice (yes/no) >> ";
						cin >> str;
						cout << endl;
					} while (str != "yes" && str != "no" && str != "Yes" && str != "No"&&str!="y"&&str!="n");
					if (str == "Yes" || str == "yes"||str=="y") {
						users.erase(users.begin() + loggedIn);
						loggedIn = -1;
						cout << "Successfully logged out!\n";;
					}
				}
				default:
					break;
				}
			} 
		}while (chooseTmp != 0);

		ofstream file("data/UserData.txt");
		if (file.is_open()) {
			file << users.size() << endl;
			for (int i = 0; i < users.size(); i++)
			{
				users[i].saveUserToFile(file);
			}
			file.close();
		}
		else {
			cout << "|  File couldn't create!\n";
		}
		ofstream file1("TestFoodData.txt");
		if (file1.is_open()) {
			fServ.saveFoodServicesToFile(file1);
			file1.close();
		}
		else {
			cout << "|  File couldn't create!\n";
		}
		try {
			ofstream file2("data/TourArray.txt");
			if (file2.is_open()) {
				tour_arr.saveToFile(file2);
				file2.close();
			}
			else {
				cout << "|  File couldn't create!\n";
			}
		}
		catch (TourArrayException* err) { err->message(); delete err; }
		ofstream file3("data/TourAgencyData.txt");
		if (file3.is_open()) {
			file3 << name << endl;
			file3 << loggedIn << endl;
			file3 << price << endl;
			file3.close();
		}
		else {
			cout << "|  File couldn't create!\n";
		}
	}

	//void compareUsersLogins() {}

	void verification() {
		if (loggedIn == -1) {
			int menu;
			do {
				system("cls");
				cout << "Welcome to our Tour Agency: " + name + "!\n";
				cout << "If you have account please Log In,\n";
				cout << "Otherwise Sign In\n";
				cout << "1. Log In" << endl;
				cout << "2. Sign In" << endl;
				cout << "0 - EXIT" << endl;
				cin >> menu;
				string tmpStr;
				switch (menu)
				{
				case 1:
					//Exception empty users
					cout << "Input login: ";
					cin >> tmpStr;
					for (int i = 0; i < users.size(); i++) {
						if (tmpStr == users[i].getLogin()) {
							cout << "Input password: ";
							cin >> tmpStr;
							if (tmpStr == users[i].getPassword()) {
								loggedIn = i;
								cout << "Successfully logged in!" << endl;
								menu = 0;
								break;
							}
							else {
								cout << "Incorrect password! Please check yourself.\n";
							}
						}
					}
					if (loggedIn == -1) cout << "Incorrect login! There are no users with that login!\n";
					break;
				case 2:
				{
					cout << "Input login: ";
					cin >> tmpStr;
					for (int i = 0; i < users.size(); i++) {
						if (tmpStr == users[i].getLogin()) {
							//Exception equal login
						}
					}
					User tmpUser;
					tmpUser.setLogin(tmpStr);
					cout << "Input password: ";
					cin >> tmpStr;
					tmpUser.setPassword(tmpStr);
					cout << "Input name: ";
					cin >> tmpStr;
					tmpUser.setUserName(tmpStr);
					cout << "Input phone number: ";
					cin >> tmpStr;
					tmpUser.setUserPhone(tmpStr);
					cout << "Successfully signed in!\n";
					users.push_back(tmpUser);
					loggedIn = users.size() - 1;
					menu = 0;
					
					/*bool login(db * arr, int arr_sz, char* log, char* pss) {

						for (int i = 0; i < arr_sz; i++)
						{
							if (strcmp(log, arr[i].login.str) >= 0)
							{
								if (strcmp(pss, arr[i].password.str) >= 0)
								{
									cout << "Loged In!\n";
									return true; break;
								}
							}
						}
						cout << "Error";
						return false;
					}*/
				}
				default:
					break;
				}
			} while (menu != 0);
		}
	}

	void makeOrder(bool hotel, bool food, bool tour) {
		if (hotel == 1){
			int hid = 0, rid = 0;
			hArr.showForOrder();
			//two cin for adress and roomid
			//cin date
			//cin term
			//h_arr[hid].addOqqupier();
			price += hArr.calcSumm(hid, rid);
			cout << "Final price: " << price;
		}
		if (tour == 1) {
			try {
				int index = tour_arr.showAllForClientOrder();
				if (index == -1) {
					return;
				}
				users[loggedIn].addTour(tour_arr.returnTour(index));
			}
			catch (TourArrayException* err) { err->message(); delete err; }
		}
		if (food == 1) {
			int index = fServ.editForClient();
			if (index == -1){
				return;
			}
			users[loggedIn].addFoodService(fServ.returnFoodService(index));
		}
		if (hotel == 1 && tour == 1 && food == 1) {
			price *= 0.7;
		}
		//else if (!hotel && food && !tour)
	}
};
	